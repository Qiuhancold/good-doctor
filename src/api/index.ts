/*
 * @Author: qh
 * @Date: 2023-04-07 15:38:29
 * @LastEditors: qh
 * @LastEditTime: 2023-04-07 15:43:58
 * @Description: ËØ∑Â°´ÂÜôÁÆÄ‰ªã
 * ‰ªÖÈôêÂÜÖÈÉ®‰ΩøÁî®
 */
/**
 * Generated by orval v6.13.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ApiResponse,
  UploadFileBody,
  PetBody,
  Pet,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormBody,
  Order,
  GetInventory200,
  UserArrayBody,
  User,
  LoginUserParams
} from './model'



/**
* @summary uploads an image
*/
export const uploadFile = <TData = AxiosResponse<ApiResponse>> (
  petId: number,
  uploadFileBody: UploadFileBody, options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  if (uploadFileBody.additionalMetadata !== undefined) {
    formData.append('additionalMetadata', uploadFileBody.additionalMetadata)
  }
  if (uploadFileBody.file !== undefined) {
    formData.append('file', uploadFileBody.file)
  }

  return axios.post(
    `/pet/${petId}/uploadImage`,
    formData, options
  );
}

/**
 * @summary Add a new pet to the store
 */

export const addPet = <TData = AxiosResponse<unknown>> (
  petBody: PetBody, options?: AxiosRequestConfig
): Promise<TData> => {
  // petBodyÊòØ‰∏çÊòØÊàëË¶Å‰º†ÈÄíÁöÑÂèÇÊï∞
  return axios.post(
    `/pet`,
    petBody, options
  );
}

/**
 * @summary Update an existing pet
 */
export const updatePet = <TData = AxiosResponse<unknown>> (
  petBody: PetBody, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `/pet`,
    petBody, options
  );
}

/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = <TData = AxiosResponse<Pet[]>> (
  params: FindPetsByStatusParams, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/pet/findByStatus`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export const findPetsByTags = <TData = AxiosResponse<Pet[]>> (
  params: FindPetsByTagsParams, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/pet/findByTags`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}

/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = <TData = AxiosResponse<Pet>> (
  petId: number, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/pet/${petId}`, options
  );
}

/**
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = <TData = AxiosResponse<unknown>> (
  petId: number,
  updatePetWithFormBody: UpdatePetWithFormBody, options?: AxiosRequestConfig
): Promise<TData> => {
  const formUrlEncoded = new URLSearchParams();
  if (updatePetWithFormBody.name !== undefined) {
    formUrlEncoded.append('name', updatePetWithFormBody.name)
  }
  if (updatePetWithFormBody.status !== undefined) {
    formUrlEncoded.append('status', updatePetWithFormBody.status)
  }

  return axios.post(
    `/pet/${petId}`,
    formUrlEncoded, options
  );
}

/**
 * @summary Deletes a pet
 */
export const deletePet = <TData = AxiosResponse<unknown>> (
  petId: number, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `/pet/${petId}`, options
  );
}

/**
 * @summary Place an order for a pet
 */
export const placeOrder = <TData = AxiosResponse<Order>> (
  order: Order, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/store/order`,
    order, options
  );
}

/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = <TData = AxiosResponse<Order>> (
  orderId: number, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/store/order/${orderId}`, options
  );
}

/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = <TData = AxiosResponse<unknown>> (
  orderId: number, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `/store/order/${orderId}`, options
  );
}

/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = <TData = AxiosResponse<GetInventory200>> (
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/store/inventory`, options
  );
}

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = <TData = AxiosResponse<unknown>> (
  userArrayBody: UserArrayBody, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/user/createWithArray`,
    userArrayBody, options
  );
}

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = <TData = AxiosResponse<unknown>> (
  userArrayBody: UserArrayBody, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/user/createWithList`,
    userArrayBody, options
  );
}

/**
 * @summary Get user by user name
 */
export const getUserByName = <TData = AxiosResponse<User>> (
  username: string, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/user/${username}`, options
  );
}

/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = <TData = AxiosResponse<unknown>> (
  username: string,
  user: User, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `/user/${username}`,
    user, options
  );
}

/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = <TData = AxiosResponse<unknown>> (
  username: string, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `/user/${username}`, options
  );
}

/**
 * @summary Logs user into the system
 */
export const loginUser = <TData = AxiosResponse<string>> (
  params: LoginUserParams, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/user/login`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}

/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = <TData = AxiosResponse<unknown>> (
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `/user/logout`, options
  );
}

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = <TData = AxiosResponse<unknown>> (
  user: User, options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `/user`,
    user, options
  );
}

export type UploadFileResult = AxiosResponse<ApiResponse>
export type AddPetResult = AxiosResponse<unknown>
export type UpdatePetResult = AxiosResponse<unknown>
export type FindPetsByStatusResult = AxiosResponse<Pet[]>
export type FindPetsByTagsResult = AxiosResponse<Pet[]>
export type GetPetByIdResult = AxiosResponse<Pet>
export type UpdatePetWithFormResult = AxiosResponse<unknown>
export type DeletePetResult = AxiosResponse<unknown>
export type PlaceOrderResult = AxiosResponse<Order>
export type GetOrderByIdResult = AxiosResponse<Order>
export type DeleteOrderResult = AxiosResponse<unknown>
export type GetInventoryResult = AxiosResponse<GetInventory200>
export type CreateUsersWithArrayInputResult = AxiosResponse<unknown>
export type CreateUsersWithListInputResult = AxiosResponse<unknown>
export type GetUserByNameResult = AxiosResponse<User>
export type UpdateUserResult = AxiosResponse<unknown>
export type DeleteUserResult = AxiosResponse<unknown>
export type LoginUserResult = AxiosResponse<string>
export type LogoutUserResult = AxiosResponse<unknown>
export type CreateUserResult = AxiosResponse<unknown>
